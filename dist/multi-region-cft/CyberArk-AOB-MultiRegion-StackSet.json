{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "SNSTopicToElasticityLambda": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "CyberArkAOBTopic"
      }
    },
    "EventTopicPolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": "sns:Publish",
              "Resource": {
                "Ref": "SNSTopicToElasticityLambda"
              }
            },
            {
              "Sid":"Allow-solution-account-to-subscribe-to-topic",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Sub": [
                      "arn:aws:iam::${SolutionAccountId}:role/CyberArk-AOB-SubscribeServiceRole",
                      {
                        "SolutionAccountId": {
                          "Ref": "SolutionAccountId"
                        }
                      }
                    ]
                  }
                ]
              },
              "Action": "sns:Subscribe",
              "Resource": {
                "Ref": "SNSTopicToElasticityLambda"
              }
            }
          ]
        },
        "Topics": [
          {
            "Ref": "SNSTopicToElasticityLambda"
          }
        ]
      }
    },
    "SNSSubscriptionToElasticityLambda": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "MatchesSolutionAccount",
      "Properties": {
        "Endpoint": {
          "Fn::Sub": [
            "arn:aws:lambda:${SolutionRegion}:${SolutionAccountId}:function:CyberArk-AOB-MultiRegion-CF-ElasticityLambda",
            {
              "SolutionRegion": {
                "Ref": "SolutionRegion"
              },
              "SolutionAccountId": {
                "Ref": "SolutionAccountId"
              }
            }
          ]
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "SNSTopicToElasticityLambda"
        }
      }
    },
    "EventBridgeRuleInstanceChangeTrigger": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Event Bridge event rule which fires on create/start/termination of an EC2 Instance ",
        "EventPattern": {
          "source": [
            "aws.ec2"
          ],
          "detail-type": [
            "EC2 Instance State-change Notification"
          ],
          "detail": {
            "state": [
              "running",
              "terminated"
            ]
          }
        },
        "Name": "Instance_Status_Change_Trigger",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "SNSTopicToElasticityLambda"
            },
            "Id": "CloudWatch_Instance_Change_Target"
          }
        ]
      }
    },
    "AssumeRoleForElasticityLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "ShouldCreateAssumeRole",
      "Properties": {
        "RoleName": "CyberArk-AOB-AssumeRoleForElasticityLambda",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Sub": [
                      "arn:aws:iam::${SolutionAccountId}:role/CyberArk-AOB-ElasticityLambdaRole",
                      {
                        "SolutionAccountId": {
                          "Ref": "SolutionAccountId"
                        }
                      }
                    ]
                  }
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "AssumeRoleForElasticityLambdaPolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "ShouldCreateAssumeRole",
      "Properties": {
        "PolicyName": "ElasticityLambdaAccess",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeImages",
                "ec2:GetPasswordData",
                "ec2:DescribeInstances",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeVpcs",
                "ec2:DescribeVpcAttribute",
                "ec2:DescribeTags"
              ],
              "Resource": "*"
            }  
          ]
        },
        "Roles": [
          {
            "Ref": "AssumeRoleForElasticityLambdaRole"
          }
        ]
      }
    }
  },
  "Description": "",
  "Parameters": {
    "SolutionAccountId": {
      "Type": "String",
      "Description": "The AccountId where the main solution is deployed"
    },
    "SolutionRegion": {
      "Type": "String",
      "Description": "The Region where the min solution is deployed"
    },
    "FirstStackInAccount": {
      "Type": "String",
      "Description": "Is this the first stack deployment in the target account(s)?",
      "Default": "Yes",
      "AllowedValues" : [
        "Yes",
        "No"
      ]
    }
  },
  "Conditions": {
    "IsFirstStackInAccount": {
      "Fn::Equals": [
        {
          "Ref": "FirstStackInAccount"
        },
        "Yes"
      ]
    },
    "MatchesSolutionAccount": {
      "Fn::Equals": [
        {
          "Ref": "SolutionAccountId"
        },
        {
          "Ref": "AWS::AccountId"
        }
      ]
    },
    "ShouldCreateAssumeRole": {
      "Fn::And": [
        {
          "Condition": "IsFirstStackInAccount"
        },
        {
          "Fn::Not": [
            {
              "Condition": "MatchesSolutionAccount"
            }
          ]
        }
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
    "ParameterGroups": [
      {
        "Label": {
          "default": "General Parameters"
        },
        "Parameters": [
          "SolutionAccountId",
          "SolutionRegion",
          "FirstStackInAccount"
        ]
      }
    ],
      "ParameterLabels": {
        "SolutionAccountId": {
          "default": "Solution AccountId"
        },
        "SolutionRegion": {
          "default": "Solution Region"
        },
        "FirstStackInAccount": {
          "default": "First Stack in Target Account(s)?"
        }
      }
    }
  }
}